{
    "file header by nc": {
        "prefix": "header",
        "body": [
            "// -------------------------------------------------------------------------------------------------",
            "// Copyright (c) 2020-$CURRENT_YEAR. All rights reserved.",
            "// Project    :",
            "// Filename   :    $TM_FILENAME",
            "// Author     :    Niechuan",
            "// Email      :    niechuan.wk@gmail.com",
            "// Description:",
            "//",
            "// ***********************************************************************************************",
            "// Modification History:",
            "// Date           By           Revision           Change Description",
            "// -----------------------------------------------------------------------------------------------",
            "// $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE                  1.0                origin",
            "//",
            "//",
            "// ***********************************************************************************************",
            "// Warning:",
            "// Any bug or new reqirement, please report to the Author.",
            "// ***********************************************************************************************"
        ],
        "description": "file header to text"
    },
    "always by nc": {
        "prefix": "always",
        "body": [
            "always_ff@(posedge ${1:clk} or posedge ${2:rst})",
            "begin",
            "    if(rst)begin",
            "        $3 <= '0;",
            "    end",
            "    else if($4)begin",
            "        $3 <= $5;",
            "    end",
            "    else begin",
            "        $3 <= $6;",
            "    end",
            "end"
        ],
        "description": "always by nc"
    },
    "always_n by nc": {
        "prefix": ["always_n","aln"],
        "body": [
            "always_ff@(posedge ${1:clk} or negedge ${2:rstn})",
            "begin",
            "    if(!${2:rstn})begin",
            "        $3 <= '0;",
            "    end",
            "    else if($4)begin",
            "        $3 <= $5;",
            "    end",
            "    else begin",
            "        $3 <= $6;",
            "    end",
            "end"
        ],
        "description": "always by nc"
    },
    "always_ff by nc": {
        "prefix": ["always_ff","alff"],
        "body": [
            "always_ff@(posedge ${1:clk} or posedge ${2:rst})",
            "begin",
            "    if(rst)begin",
            "        $3 <= '0;",
            "    end",
            "    else if($4)begin",
            "        $3 <= $5;",
            "    end",
            "    else begin",
            "        $3 <= $6;",
            "    end",
            "end"
        ],
        "description": "always by nc"
    },
    "always_ff_async by nc": {
        "prefix": ["always_ff_sync","alffa"],
        "body": [
            "always_ff@(posedge ${1:clk})",
            "begin",
            "    if($2)begin",
            "        $3 <= $4;",
            "    end",
            "    else begin",
            "        $3 <= $5;",
            "    end",
            "end"
        ],
        "description": "always sync by nc"
    },
    "pipeline by nc": {
        "prefix": ["pipeline"],
        "body": [
            "logic $1_1d;",
            "logic $1_2d;",
            "always_ff@(posedge ${2:clk})",
            "begin",
            "    $1_1d <= $1;",
            "    $1_2d <= $1_1d;",
            "end"
        ],
        "description": "always async rst by nc"
    },
    "pos by nc": {
        "prefix": ["pos"],
        "body": [
            "// $1 posedge",
            "logic $1_1d;",
            "logic $1_pos;",
            "",
            "always_ff@(posedge ${2:clk})",
            "begin",
            "    $1_1d <= $1;",
            "end",
            "",
            "assign $1_pos = $1 & (~$1_1d);"
        ],
        "description": "pos by nc"
    },
    "decalre by nc": {
        "prefix": "declare",
        "body": [ 
            "//The end of declare"
        ],
        "description": "decalre by nc "
    },
    "assign by nc": {
        "prefix": "assign",
        "body": [ 
            "assign $1 = $2;"
        ],
        "description": "assign by nc "
    },
    "define by nc": {
        "prefix": "define",
        "body": [ 
            "define    $1    32'h0000_0000;"
        ],
        "description": "define by nc"
    },
    "generate by nc": {
        "prefix": "generate",
        "body": [ 
            "generate",
            "    for(genvar i=0;i<$1;i=i+1)",
            "    begin:u_gen_$2",
            "    ",
            "    end",
            "endgenerate"
        ],
        "description": "generate by nc"
    },
    "zsk1 by nc": {
        "prefix": "zsk1",
        "body": [ 
            "// ------------------------------------------------------------------------------------------------------------------------",
            "// $1",
            "// ------------------------------------------------------------------------------------------------------------------------"
        ],
        "description": "zsk1"
    },
    "zsk2 by nc": {
        "prefix": "zsk2",
        "body": [ 
            "// --------------------------------------------------------------------------------",
            "// $1",
            "// --------------------------------------------------------------------------------"
        ],
        "description": "zsk2"
    },
    "zsk3 by nc": {
        "prefix": "zsk3",
        "body": [ 
            "// ----------------------------------------",
            "// $1",
            "// ----------------------------------------"
        ],
        "description": "zsk3"
    },
    "zs1 by nc": {
        "prefix": "zs1",
        "body": [ 
            "// ------------------------------------------------------------------------------------------------------------------------"
        ],
        "description": "zs1"
    },
    "zs2 by nc": {
        "prefix": "zs2",
        "body": [ 
            "// --------------------------------------------------------------------------------"
        ],
        "description": "zs2"
    },
    "zs3 by nc": {
        "prefix": "zs3",
        "body": [ 
            "// ----------------------------------------"
        ],
        "description": "zs3"
    },
    "port_in by nc": {
        "prefix": "pi",
        "body": [ 
            "// -<"
        ],
        "description": "port_in"
    },
    "port_out by nc": {
        "prefix": "po",
        "body": [ 
            "// ->"
        ],
        "description": "port_out"
    },
    "module by nc": {
        "prefix": "module",
        "body": [ 
            "module $TM_FILENAME_BASE",
            "#(",
            "    parameter C_ = $1",
            ")",
            "(",
            "    input                    clk,",
            "    input                    rst,",
            "    input    [15:0][ 8:0]    siganl,",
            "    output                   siganl,",
            "    output         [ 8:0]    siganl,",
            "    output   [15:0][ 8:0]    siganl",
            ");",
            "",
            "// ------------------------------------------------------------------------------------------",
            "// Function: ",
            "// ------------------------------------------------------------------------------------------",
            "",
            "endmodule"
        ],
        "description": "module by nc"
    },
    "module": {
        "prefix": "module",
        "body": [
            "module ${1:name}(",
            "\t${2:port_list}",
            ");",
            "\t$0",
            "endmodule"
        ],
        "description": "Snippet for a module definition"
    },
    "module#(param)": {
        "prefix": "module #(",
        "body": [
            "module ${1:name} #(",
            "\t${2:parameters}",
            ") (",
            "\t${3:port_list}",
            ");",
            "\t$0",
            "endmodule"
        ],
        "description": "Snippet for a parameterized module definition"
    },
    "assign": {
        "prefix": "assign",
        "body": [
            "assign ${1:var} = ${2:value};$0"
        ],
        "description": "Snippet for an assignment"
    },
    "force": {
        "prefix": "force",
        "body": [
            "force ${1:var} = ${2:value};$0"
        ],
        "description": "Snippet for a force assignment"
    },
    "always_comb": {
        "prefix": "always_comb",
        "body": [
            "always_comb begin",
            "\t$0",
            "end"
        ],
        "description": "Snippet for an always_comb block"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) begin",
            "\t${2:pass}",
            "end"
        ],
        "description": "Snippet for an if statement"
    },
    "if/else": {
        "prefix": "if/else",
        "body": [
            "if (${1:condition}) begin",
            "\t${2:pass}",
            "end else begin",
            "\t${3:pass}",
            "end"
        ],
        "description": "Snippet for an if statement with else"
    },
    "elseif": {
        "prefix": "else if",
        "body": [
            "else if (${1:condition}) begin",
            "\t$0",
            "end"
        ],
        "description": "Snippet for an else if"
    },
    "else": {
        "prefix": "else",
        "body": [
            "else begin",
            "\t$0",
            "end"
        ],
        "description": "Snippet for an else"
    },
    "case": {
        "prefix": "case",
        "body": [
            "case (${1:variable})",
            "\t$0",
            "endcase"
        ],
        "description": "Snippet for a case statement"
    },
    "case/default": {
        "prefix": "case/default",
        "body": [
            "case (${1:variable})",
            "\t$0",
            "\tdefault: begin",
            "\t\t${2:default_case}",
            "\tend",
            "endcase"
        ],
        "description": "Snippet for a case statement with default"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while (${1:expression}) begin",
            "\t$0",
            "end"
        ],
        "description": "Snippet for a while loop"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for (int ${1:i}=0; ${1:i}<${2:MAX}; ++${1:i}) begin",
            "\t$0",
            "end"
        ],
        "description": "Snippet for a for loop"
    },
    "foreach": {
        "prefix": "foreach",
        "body": [
            "foreach (${1:arr}[${2:i}]) begin",
            "\t$0",
            "end"
        ],
        "description": "Snippet for a foreach loop"
    },
    "task": {
        "prefix": "task",
        "body": [
            "task ${1:name}(${2:port_list});",
            "\t$0",
            "endtask"
        ],
        "description": "Snippet for a task definition"
    },
    "class": {
        "prefix": "class",
        "body": [
            "class ${1:name};",
            "\t$0",
            "endclass"
        ],
        "description": "Snippet for a class definition"
    },
    "class/extends": {
        "prefix": "class/extends",
        "body": [
            "class ${1:name} extends ${2:super};",
            "\tfunction new();",
            "\t\t$0",
            "\tendfunction",
            "endclass"
        ],
        "description": "Snippet for a class definition with extends"
    },
    "program": {
        "prefix": "program",
        "body": [
            "program ${1:name}(${2:port_list});",
            "\t$0",
            "endprogram"
        ],
        "description": "Snippet for a program definition"
    },
    "assert": {
        "prefix": "assert",
        "body": [
            "${1:label}: assert (${2:test})",
            "\telse \\$error(\"${0:Assertion ${1:label} failed!}\");"
        ],
        "description": "Snippet for an immediate assertion"
    },
    "property": {
        "prefix": "property",
        "body": [
            "property ${1:name};",
            "\t@(posedge ${2:clk}) ${0:test}",
            "endproperty"
        ],
        "description": "Snippet for a property"
    },
    "generate": {
        "prefix": "generate",
        "body": [
            "generate;",
            "\t$0",
            "endgenerate"
        ],
        "description": "Snippet for a generate block"
    },
    "typedef/struct": {
        "prefix": "typedef/struct",
        "body": [
            "typedef struct packed {",
            "\t$0",
            "} ${1:name};"
        ],
        "description": "Snippet for a structure type definition"
    },
    "typedef/enum": {
        "prefix": "typedef/enum",
        "body": ["typedef enum ${1:type} { $0 } ${2:name};"],
        "description": "Snippet for a enumeration type definition"
    },
    "interface": {
        "prefix": "interface",
        "body": [
            "interface ${1:name};",
            "\t$0",
            "endinterface"
        ],
        "description": "Snippet for an interface definition"
    },
    "reg": {
        "prefix": "reg",
        "body": ["reg $1;$0"],
        "description": "Snippet for a register declaration"
    },
    "wire": {
        "prefix": "wire",
        "body": ["wire $1;$0"],
        "description": "Snippet for a wire declaration"
    },
    "logic": {
        "prefix": "logic",
        "body": ["logic $1;$0"],
        "description": "Snippet for a logic signal declaration"
    },
	"modport": {
		"prefix": "modport",
		"body": [
			"modport ${1:identifier} (",
			"input ${2:input_ports},",
			"output ${3:output_ports}",
			");"
		],
		"description": "modport name (input ports_in, output ports_out); "
	},
	"display": {
		"prefix": "display",
		"body": [
			"\\$display(\"$1\"$2);$0"
		],
		"description": "$display(\"...\", params...)"
	},
	"begin/end": {
		"prefix": "begin",
		"body": [
			"begin",
			"\t$1",
			"end"
		],
		"description": "Insert a begin ... end block"
	},
	"initial": {
		"prefix": "initial",
		"body": [
			"initial begin",
			"\t$0",
			"end"
		],
		"description": "initial begin ... end"
	},
	"casex": {
		"prefix": "casex",
		"body": [
			"casex (${1:param})",
			"\t$2: $3",
			"\tdefault: $4",
			"endcase"
		],
		"description": "casex () ... endcase"
	},
	"casez": {
		"prefix": "casez",
		"body": [
			"casez (${1:param})",
			"\t$2: $3",
			"\tdefault: $4",
			"endcase"
		],
		"description": "casez () ... endcase"
	},
	"include": {
		"prefix": ["include", "`include"],
		"body": [
			"`include \"$1\""
		],
		"description": "`include \"..\""
	},
	"ifdef": {
		"prefix": ["ifdef", "`ifdef"],
		"body": "`ifdef ${1:macro}",
		"description": "`ifdef macro"
	},
	"ifndef": {
		"prefix": ["ifndef", "`ifndef"],
		"body": "`ifndef ${1:macro}",
		"description": "`ifndef macro"
	},
	"elsif": {
		"prefix": ["elsif", "`elsif"],
		"body": "`elsif ${1:macro}",
		"description": "`elsif macro"
	},
	"endif": {
		"prefix": ["endif", "`endif"],
		"body": "`endif ${1:macro}",
		"description": "`endif macro"
	},
	"undef": {
		"prefix": ["undef", "`undef"],
		"body": "`undef ${1:macro}",
		"description": "`undef macro"
	},
	"timescale": {
		"prefix": ["ts", "timescale", "`timescale"],
		"body": [
			"`timescale ${1:1ps}/${2:1ps}$0"
		]
	},
	"forever": {
		"prefix": "forever",
		"body": [
			"forever begin",
			"\t$0",
			"end"
		],
		"description": "forever begin ... end"
	},
	"function": {
		"prefix": "function",
		"body": [
			"function $1;",
			"\t$2;",
			"\t$3",
			"endfunction"
		],
		"description": "function (...) ... endfunction"
	}
}